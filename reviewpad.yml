extends:
  - https://github.com/reviewpad/.github/blob/main/reviewpad-models/common.yml

labels:
  external-contribution:
    description: External contribution
    color: "#8a2151"
  plugins:
    description: Modifications to the plugins directory
    color: "#294b72"
  critical:
    description: Modifications to critical changes
    color: "#294b75"
  waiting-review:
    description: Pull request is waiting for review
    color: "#cccc00"
  requires-author-attention:
    description: Pull request requires author attention
    color: "#b20000"

groups:
  - name: owners
    description: Group of owners
    kind: developers
    spec: '["ferreiratiago", "marcelosousa"]'

  - name: maintainers
    description: Official maintainers
    spec: '["marcelosousa", "ferreiratiago", "shay2025", "zolamk"]'

rules:
  - name: is renovate bot
    description: Author is Renovate Bot
    spec: $author() == "renovate[bot]"

  - name: is external contribution
    description: Author is not a Reviewpad core contributor
    spec: '!$isElementOf($author(), $group("maintainers"))'

  - name: touches plugin functions
    description: Modifies the plugin functions
    spec: $hasFilePattern("plugins/aladino/functions/**")

  - name: touches plugin actions
    description: Modifies the plugin actions
    spec: $hasFilePattern("plugins/aladino/actions/**")

  - name: touches plugin functions and actions
    description: Modifies both plugin actions and functions
    spec: $rule("touches plugin actions") && $rule("touches plugin functions")

  - name: touches plugin functions or actions and not builtins
    description: Modifies plugins but not built-ins
    spec: ($rule("touches plugin actions") || $rule("touches plugin functions")) && !$hasFileName("plugins/aladino/builtins.go")

workflows:
  # Define who needs to pay attention to the pull request
  - name: attention set
    always-run: true
    run:
      - if: $isWaitingForReview()
        then: $addLabel("waiting-review")
        else: $removeLabel("waiting-review")
      - if: $hasUnaddressedThreads()
        then: $addLabel("requires-author-attention")
        else: $removeLabel("requires-author-attention")

  # Welcome external contributors
  - name: external contribution
    always-run: true
    run:
      - if: $rule("is external contribution")
        then: $addLabel("external-contribution")
      - if: $rule("is external contribution") && !$rule("is renovate bot")
        then: $info($sprintf("@%s thanks for your contribution!", [$author()]))

  # Bind the pull request to the github project
  - name: add to github project
    always-run: true
    run:
      - if: '!$hasLinkedIssues() && !$isLinkedToProject("Reviewpad")'
        then: $addToProject("Reviewpad", "In Review")

  # When changing critical code, we need to make sure that the reviewer is aware of it.
  - name: changes to critical code
    always-run: true
    run:
        # Having assignees means that the pull request is already being assigned to someone.
        # Therefore, we are ready to verify if the code is critical or not.
        - if: $assignees() == [] && ($hasAnnotation("critical") || $hasFileName("runner.go"))
          then:
            - $addLabel("critical")
            - $assignReviewer($group("owners"), 1)

  # Create awareness when some parts of the code are being modified.
  - name: awareness
    always-run: true
    run:
      - if: $rule("touches plugin functions") || $rule("touches plugin actions")
        then:
          - $addLabel("plugins")
          - $info("If you are adding or updating a built-in, please do not forget to update the [docs](https://github.com/reviewpad/docs)")
      - if: $rule("touches plugin functions and actions")
        then: $warn("It looks like you modified both functions and actions. Is that intentional?")
      - if: $rule("touches plugin functions or actions and not builtins")
        then: $info("If you have added a new function or action do not forget to include it in the built-in list!")

  # Assign a reviewer to the pull request.
  # This is done based on the review strategy.
  # The review strategy can be "ship", "show" or "ask".
  - name: assign reviewer based on review strategy
    description: Assign a reviewer to a pull request depending on the review strategy.
    always-run: true
    run:
      # When review strategy is "ask", assign a reviewer to the pull request.
      - if: $assignees() == [] && author() != "renovate[bot]" && ($rule("review-strategy:ask") || $rule("is external contribution"))
        then: $assignCodeAuthorReviewers(1, $group("reviewers to ignore"), 2)
      # When review strategy is "show", remind about the pull request in the meeting.
      - if: $isMerged() && $rule("review-strategy:show") && $isElementOf($author(), $group("maintainers"))
        then: $commentOnce($sprintf("@%v please add this pull request to the meeting agenda where pull requests with the `show` strategy are reviewed", [$author()]))
      # When review strategy is "ship", there is nothing to do.

pipelines:
  # When the pull request touches the LICENSE file.
  - name: license
    trigger: $hasFileName("LICENSE")
    stages:
      - actions:
          - $error("Sorry, you are not authorized to make these changes")
          - $close()
        until: $isElementOf($author(), $group("owners"))
      - actions:
          - $error("You are changing more than the LICENSE file. Pull request that change the LICENSE file should only modify the LICENSE file.")
          - $close()
        until: $fileCount() == 1
      - actions:
          - $addLabel("modifies-license")
          - $assignReviewer($group("owners"), 1)

  # When the pull request is from renovate bot.
  - name: renovate-bot
    trigger: $author() == "renovate[bot]"
    stages:
      - actions:
          - $assignAssignees($group("owners"), 1)
        until: $assignees() != []
      - actions:
          - $comment("Pull request is not up to date with the base branch. Reviewpad will rebase it for you. Please wait for the rebase to complete.")
          - $rebase()
        until: $isUpdatedWithBaseBranch() && $hasLinearHistory()
      - actions:
          - $warn("The build is failing. Closing pull request.")
          - $close()
        until: $checkRunConclusion("pr-build") == "success"
      - actions:
          - $assignReviewer($group("owners"), 1)
        until: $hasRequiredApprovals(1, $group("owners"))
      - actions:
          - $approve("Pull request is ready to be merged. Reviewpad will merge it for you. Please wait for the merge to complete.")
          - $merge("rebase")
